<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platform.mapper.BookMapper">

    <resultMap id="BaseResultMap" type="com.platform.pojo.Book">
            <id property="id" column="id" jdbcType="BIGINT"/>
            <result property="ISBN" column="ISBN" jdbcType="VARCHAR"/>
            <result property="bookName" column="bookName" jdbcType="VARCHAR"/>
            <result property="author" column="author" jdbcType="VARCHAR"/>
            <result property="publishId" column="publishId" jdbcType="BIGINT"/>
            <result property="publishDate" column="publishDate" jdbcType="VARCHAR"/>
            <result property="price" column="price" jdbcType="DECIMAL"/>
            <result property="picture" column="picture" jdbcType="VARCHAR"/>
            <result property="content" column="content" jdbcType="VARCHAR"/>
            <result property="createTime" column="createTime" jdbcType="TIMESTAMP"/>
            <result property="updateTime" column="updateTime" jdbcType="TIMESTAMP"/>
            <result property="isDeleted" column="isDeleted" jdbcType="TINYINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,ISBN,bookName,author,
        publishId,publishDate,price,
        picture,content,
        createTime,updateTime,isDeleted
    </sql>

    <resultMap id="bookName" type="com.platform.pojo.Book">
        <result property="bookName" column="bookName" jdbcType="VARCHAR"/>
       </resultMap>
    <select id="getBookByISBN" resultMap="bookName">
        select id,bookName from book where ISBN = #{ISBN}
    </select>

    <insert id="addBook">
        insert into book (ISBN,bookName,author,publishId,publishDate,price,picture,content,
                          createTime,isDeleted) values (#{bookVo.ISBN},#{bookVo.bookName},#{bookVo.author},#{bookVo.publishId},
                                                        #{bookVo.publishDate},#{bookVo.price},#{bookVo.picture},#{bookVo.content},
                                                        #{bookVo.createTime},#{bookVo.isDeleted})
    </insert>

    <!--删除图书-->
    <update id="deleteByISBN">
        update book set isDeleted = #{isDeleted},updateTime = #{updateTime} where ISBN = #{ISBN}
    </update>

    <!--修改图书信息-->
    <update id="updateBook">
        update book set bookName = #{bookVo.bookName}, author = #{bookVo.author}, publishId = #{bookVo.publishId}, publishDate = #{bookVo.publishDate}, price = #{bookVo.price},
                        picture = #{bookVo.picture}, content = #{bookVo.content}, updateTime = #{bookVo.updateTime}, isDeleted = #{bookVo.isDeleted} where ISBN = #{bookVo.ISBN}
    </update>

    <!--根据条件查询图书-->
    <select id="selectBookPage" resultType="com.platform.pojo.vo.BookVo">
        select distinct book.* from book
        <!-- 如果出版社名或者图书类型名不为空，需要联表查询-->
        <trim>
            <if test="bookVo.publishName != null">
                left join publishing_house on book.publishId =publishing_house.id
            </if>
            <if test="bookVo.type != null">
                LEFT JOIN book_type ON book.id=book_type.bookId
                LEFT JOIN TYPE t1 ON book_type.typeId=t1.id
                LEFT JOIN TYPE t2 ON t1.parentId=t2.id
            </if>
        </trim>
        <where>
            <if test="bookVo.bookName != null">
                bookName like CONCAT('%',#{bookVo.bookName},'%')
            </if>
            <if test="bookVo.author != null">
                and author like '%' || #{bookVo.author} || '%'
            </if>
            <if test="bookVo.priceHigh != null">
                and price between #{bookVo.priceLow} and #{bookVo.priceHigh}
            </if>
            <if test="bookVo.priceHigh == null">
                and price &gt;= #{bookVo.priceLow}
            </if>
            <if test="bookVo.publishName != null">
                and publishing_house.publishName=#{bookVo.publishName}
            </if>
            <if test="bookVo.type != null">
                and (t1.type=#{bookVo.type} OR t2.type=#{bookVo.type})
            </if>
            <if test="bookVo.isDeleted != null">
                and isDeleted = #{bookVo.isDeleted}
            </if>
            limit #{bookVo.pageNum},#{bookVo.pageSize}
        </where>
    </select>

</mapper>
