<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platform.mapper.BookMapper">

    <resultMap id="BaseResultMap" type="com.platform.pojo.Book">
            <id property="id" column="id" jdbcType="BIGINT"/>
            <result property="ISBN" column="ISBN" jdbcType="VARCHAR"/>
            <result property="bookName" column="bookName" jdbcType="VARCHAR"/>
            <result property="author" column="author" jdbcType="VARCHAR"/>
            <result property="publishId" column="publishId" jdbcType="BIGINT"/>
            <result property="publishDate" column="publishDate" jdbcType="VARCHAR"/>
            <result property="price" column="price" jdbcType="DECIMAL"/>
            <result property="picture" column="picture" jdbcType="VARCHAR"/>
            <result property="content" column="content" jdbcType="VARCHAR"/>
            <result property="createTime" column="createTime" jdbcType="TIMESTAMP"/>
            <result property="updateTime" column="updateTime" jdbcType="TIMESTAMP"/>
            <result property="isDeleted" column="isDeleted" jdbcType="TINYINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,ISBN,bookName,author,
        publishId,publishDate,price,
        picture,content,
        createTime,updateTime,isDeleted
    </sql>

    <select id="getBookByISBN" resultType="com.platform.pojo.Book">
        select id,bookName from book where ISBN = #{isbn}
    </select>

    <select id="getBookById" resultType="com.platform.pojo.Book">
        select id,bookName,isDelted from book where id = #{id}
    </select>

    <insert id="addBook" useGeneratedKeys="true" keyProperty="id">
        insert into book (ISBN,bookName,author,publishId,publishDate,price,picture,content,
                          createTime,isDeleted) values (#{bookVo.isbn},#{bookVo.bookName},#{bookVo.author},#{bookVo.publishId},
                                                        #{bookVo.publishDate},#{bookVo.price},#{bookVo.picture},#{bookVo.content},
                                                        now(),#{bookVo.isDeleted})
    </insert>

    <!--批量上架图书-->
    <update id="listBooksById">
        <foreach collection="books" item="book" separator=";">
            update book set isDeleted = #{book.isDeleted},updateTime = now() where id = #{book.id}
        </foreach>
    </update>

    <!--批量下架图书-->
    <update id="removeBooksById">
        <foreach collection="books" item="book" separator=";">
            update book set isDeleted = #{book.isDeleted},updateTime = now() where id = #{book.id}
        </foreach>
    </update>

    <!--修改图书信息-->
    <update id="updateBook">
        update book
        <set>
            <if test="bookVo.bookName != null">bookName = #{bookVo.bookName},</if>
            <if test="bookVo.isbn != null">ISBN = #{bookVo.isbn},</if>
            <if test="bookVo.author != null">author = #{bookVo.author},</if>
            <if test="bookVo.publishId != null">publishId = #{bookVo.publishId},</if>
            <if test="bookVo.price != null">price = #{bookVo.price},</if>
            <if test="bookVo.picture != null">picture = #{bookVo.picture},</if>
            <if test="bookVo.content != null">content = #{bookVo.content},</if>
            <if test="bookVo.updateTime != null">updateTime = now(),</if>
            <if test="bookVo.isDeleted != null">isDeleted = #{bookVo.isDeleted}</if>
        </set>
        where id = #{bookVo.id}
    </update>

    <select id="selectBookPage" resultType="com.platform.pojo.vo.BookVo">
        select distinct book.* ,publishName
        from book
        <!-- 需要联表查询出版社名称-->
        left join publishing_house on book.publishId =publishing_house.id
        <trim>
            <!--如果类型名不为空，需要连表查询 -->
            <if test="bookVo.category != null">
                LEFT JOIN book_type ON book.id=book_type.bookId
                LEFT JOIN TYPE t1 ON book_type.typeId=t1.id
                LEFT JOIN TYPE t2 ON t1.parentId=t2.id
            </if>
        </trim>
        <where>
            <!-- 如果书的Id不为空，则根据书Id查询-->
            <if test="bookVo.id != null">
                book.id=#{bookVo.id}
            </if>
            <!--如果isbn不为空，需要查询isbn -->
            <if test="bookVo.isbn != null">
                and ISBN =#{bookVo.isbn}
            </if>
            <!--书名不为空，根据书名模糊查询 -->
            <if test="bookVo.bookName != null">
                and bookName like CONCAT('%',#{bookVo.bookName},'%')
            </if>
            <!-- 作者不为空，根据作者模糊查询-->
            <if test="bookVo.author != null">
                and author like '%' || #{bookVo.author} || '%'
            </if>
            <!--如果价格不为空，则根据给定价格查询 -->
            <if test="bookVo.price != null">
                and price = #{bookVo.price}
            </if>
            <!-- 有价格上限，查询价格下限和价格上线之间的数据-->
            <if test="bookVo.priceHigh != null">
                and price between #{bookVo.priceLow} and #{bookVo.priceHigh}
            </if>
            <!--如果价格不存在价格上限，查询大于价格下限的数据，默认价格下限为0 -->
            <if test="bookVo.priceHigh == null">
                and price &gt;= #{bookVo.priceLow}
            </if>
            <!-- 如果出版社名不为空，查询指定出版社名称的数据-->
            <if test="bookVo.publishName != null">
                and publishName like CONCAT('%',#{bookVo.publishName},'%')
            </if>
            <!--如果type不为空，连表查询指定type的数据 -->
            <if test="bookVo.category != null">
                and (t1.type=#{bookVo.category} OR t2.type=#{bookVo.category})
            </if>
            <if test="bookVo.isDeleted != null">
                and book.isDeleted = #{bookVo.isDeleted}
            </if>
        </where>
        limit #{bookVo.current},#{bookVo.size}
    </select>

    <select id="selectTotal" resultType="com.platform.pojo.vo.BookVo">
        select COUNT(*) as total
        from book
        <!-- 需要联表查询出版社名称-->
        left join publishing_house on book.publishId =publishing_house.id
        <trim>
            <!--如果类型名不为空，需要连表查询 -->
            <if test="bookVo.category != null">
                LEFT JOIN book_type ON book.id=book_type.bookId
                LEFT JOIN TYPE t1 ON book_type.typeId=t1.id
                LEFT JOIN TYPE t2 ON t1.parentId=t2.id
            </if>
        </trim>
        <where>
            <!-- 如果书的Id不为空，则根据书Id查询-->
            <if test="bookVo.id != null">
                book.id=#{bookVo.id}
            </if>
            <!--如果isbn不为空，需要查询isbn -->
            <if test="bookVo.ISBN != null">
                and ISBN =#{bookVo.isbn}
            </if>
            <!--书名不为空，根据书名模糊查询 -->
            <if test="bookVo.bookName != null">
                and bookName like CONCAT('%',#{bookVo.bookName},'%')
            </if>
            <!-- 作者不为空，根据作者模糊查询-->
            <if test="bookVo.author != null">
                and author like '%' || #{bookVo.author} || '%'
            </if>
            <!--如果价格不为空，则根据给定价格查询 -->
            <if test="bookVo.price != null">
                and price = #{bookVo.price}
            </if>
            <!-- 有价格上限，查询价格下限和价格上线之间的数据-->
            <if test="bookVo.priceHigh != null">
                and price between #{bookVo.priceLow} and #{bookVo.priceHigh}
            </if>
            <!--如果价格不存在价格上限，查询大于价格下限的数据，默认价格下限为0 -->
            <if test="bookVo.priceHigh == null">
                and price &gt;= #{bookVo.priceLow}
            </if>
            <!-- 如果出版社名不为空，查询指定出版社名称的数据-->
            <if test="bookVo.publishName != null">
                and publishName like CONCAT('%',#{bookVo.publishName},'%')
            </if>
            <!--如果type不为空，连表查询指定type的数据 -->
            <if test="bookVo.category != null">
                and (t1.type=#{bookVo.category} OR t2.type=#{bookVo.category})
            </if>
            <if test="bookVo.isDeleted != null">
                and book.isDeleted = #{bookVo.isDeleted}
            </if>
        </where>
    </select>

    <select id="getBookDetailsById" resultType="com.platform.pojo.vo.BookVo">
        SELECT DISTINCT
            book.*,
            type.type as category,
            publishName
        FROM
            book
                LEFT JOIN publishing_house ON book.publishId = publishing_house.id
                LEFT JOIN book_type ON book.id = book_type.bookId
                LEFT JOIN type ON book_type.typeId = type.id

        where book.id = #{bookVo.id}
    </select>

</mapper>
